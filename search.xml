<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[125.验证回文串]]></title>
    <url>%2F2018%2F05%2F26%2F125-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[题目给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 说明：本题中，我们将空字符串定义为有效的回文串。 代码12345678910111213141516171819202122232425class Solution: def isPalindrome(self, s): """ :type s: str :rtype: bool """ lowercase = string.ascii_lowercase # uppercase = string.ascii_uppercase digits = string.digits s = s.lower() i = 0 j = len(s)-1 while(i &lt; j): if not (s[i] in lowercase or s[i] in digits): i += 1 elif not (s[j] in lowercase or s[j] in digits): j -= 1 elif s[i] != s[j]: return False else: i += 1 j -= 1 return True 注意1.考虑要全面，每一种情况都要考虑到位。 2.注意对python中自带函数的使用。 改进代码12345678class Solution: def isPalindrome(self, s): """ :type s: str :rtype: bool """ cleanlist = [c for c in s.lower() if c.isalnum()] return cleanlist == cleanlist[::-1] 收获1.要善于从python的特性入手写代码。 2.善于学习其他人的经验。 3.python代码通常比其他语言代码简洁。]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>双指针</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[做志愿者的两天]]></title>
    <url>%2F2018%2F05%2F26%2F%E5%81%9A%E5%BF%97%E6%84%BF%E8%80%85%E7%9A%84%E4%B8%A4%E5%A4%A9%2F</url>
    <content type="text"><![CDATA[第一次做志愿者。 第一天早上开会安排活动，之后选择做为今日头条 AI lab 总监李磊的志愿者，然后就开始了忙碌的两天。 看到嘉宾名单后才去网上了解李磊的，感觉还是很厉害的，然后就想着会不会不太好相处，但随后的两天里觉得人还是很nice的。 常教授想把他挖到学校来，虽然经老师们分析后感觉希望渺茫。 不过现在有了李磊博士的微信，到时候应该可以获得面试机会，至于能不能进头条 AI lab 就要看自己的能力咯。]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>try everything</tag>
        <tag>今日头条</tag>
        <tag>抖音</tag>
        <tag>字节跳动</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[242.有效的字母异位词]]></title>
    <url>%2F2018%2F05%2F25%2F242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%2F</url>
    <content type="text"><![CDATA[题目给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的一个字母异位词。字母异位词是什么鬼 字母异位词：字符串中字母相同，位置不同。(一点肤浅的理解) 代码1234567891011121314151617181920class Solution: def isAnagram(self, s, t): """ :type s: str :type t: str :rtype: bool """ hashmap1 = &#123;&#125; hashmap2 = &#123;&#125; for x in s: if x in hashmap1: hashmap1[x] += 1 else: hashmap1[x] = 1 for y in t: if y in hashmap2: hashmap2[y] += 1 else: hashmap2[y] = 1 return hashmap1 == hashmap2 总结 开两个字典，然后比较一下它们是否相同。与387.方法相似 emm…开一个字典好像就能完事儿，一个加一个减，最后如果字典为空说明它们互为字母异位词。 用set求二者的无序不重复元素集合，如果不同返回false，如果相同再依次判断每个元素在两个字符串中的数目是否相同，相同返回ture，不同返回false。 all() 函数用于判断给定的可迭代参数 iterable 中的所有元素是否都为 TRUE，如果是返回 True，否则返回 False。]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>哈希表</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[做了一点微小的贡献]]></title>
    <url>%2F2018%2F05%2F24%2F%E5%81%9A%E4%BA%86%E4%B8%80%E7%82%B9%E5%BE%AE%E5%B0%8F%E7%9A%84%E8%B4%A1%E7%8C%AE%2F</url>
    <content type="text"><![CDATA[在Star数为185的GitHub库做出了微小的贡献！ 今天才发现hh 传送门：https://github.com/skydark/nstools/graphs/contributors]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>try everything</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对python函数参数的一些理解]]></title>
    <url>%2F2018%2F05%2F24%2F%E5%AF%B9python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[函数参数值传递 为什么如此顺口… 之前在学习 C, C++ 时，对函数进行参数传递时通常是深拷贝，即另外开辟空间对所传入实际参数进行复制，得到形式参数。此时在函数内部对形式参数进行改变并不会影响实际参数。 而如果需要在函数内部通过形式参数来改变实际参数，则需要引入指针进行操作。 现在函数参数的传递与修改在 python 中，一切皆对象。而对象又分为可变 (immutable) 对象与不可变 (immutable) 对象。 不可变对象，该对象所指向的内存中的值不能被改变。当改变某个变量时候，由于其所指的值不能被改变，相当于把原来的值复制一份后再改变，这会开辟一个新的地址，变量再指向这个新的地址。 可变对象，该对象所指向的内存中的值可以被改变。变量（准确的说是引用）改变后，实际上是其所指的值直接发生改变，并没有发生复制行为，也没有开辟新的出地址，通俗点说就是原地改变。 在 python 中，int, float, str,tuple均为不可变对象；而 dict, list, set 均为可变对象。 在进行参数传递时，若所传参数为不可变对象，则进行深拷贝传递。若所传对象为不可变对象，则进行浅拷贝传递，即传递的是实际参数的引用，此时便可以在函数内部通过修改形式参数来改变实际参数了。 而如果要对可变对象进行深拷贝传递，则必须在传递时创建一个明确的可变对象的拷贝。12345678910def change(a,b): a = 2 b[0] = 'spam'x = 1l = [1,2]change(x,l[:])print(x,l)1 [1, 2] 或传递后在函数内部进行拷贝。这样可以不改变传入的对象，函数调用看上去没有变化。1234567891011def change(a,b): b = b[:] a = 2 b[0] = 'spam'x = 1l = [1,2]change(x,l)print(x,l)1 [1, 2] 函数参数的匹配在默认情况下，参数是通过其位置进行匹配的。即123456def f(a,b,c): print(a,b,c)f(1,2,3)1 2 3 python中还可以使用基于关键字的参数匹配形式。即123456def f(a,b,c): print(a,b,c)f(c=3,a=1,b=2)1 2 3 在一个调用中混合使用基于位置的参数和基于关键字的参数也可以。即123456def f(a,b,c): print(a,b,c)f(1,c=3,b=2)1 2 3 默认参数形式。默认参数允许创建函数可选的参数，如果没有传入值的话，在函数运行前，参数就被赋予了默认值。即12345678def f(a,b=2,c=3): print(a,b,c)f(1)1 2 3f(a=1)1 2 3 还有一种关键字和默认参数一起使用的情况。即123456def f(a,b=2,c=3): print(a,b,c)f(1,c=6)1 2 6 *与**函数定义中*和**符号出现在函数定义的参数中时，表示任意数目参数收集。 *是用元组的形式收集不匹配的位置参数。即123456def f(a,*args): print(args)f(1,2,3,4) (2, 3, 4) **只对关键字参数有效。即123456def f(**kargs): print(kargs)f(a=1,b=2)&#123;'b': 2, 'a': 1&#125; 在这种情况下，**允许将关键字参数转化为字典，能够在之后使用键调用来进行步进或字典迭代。 例： 在函数头部混合一般参数、*以及**的调用方式。123456def f(a, *pargs, **kargs): print(a,pargs,kargs)f(1,2,3,x=4,y=5)1 (2, 3) &#123;'x': 4, 'y': 5&#125; 函数调用中与函数定义中相反，在函数调用中使用*或**会解包参数的集合。 在调用函数时使用*解包一个元组1234567def func(a,b,c,d): print(a,b,c,d)args = (1,2,3,4)func(*args)1 2 3 4 在调用函数时使用**解包一个字典1234567def func(a,b,c,d): print(a,b,c,d)kargs = &#123;'a':1, 'b':2, 'c':3, 'd':4&#125;func(**kargs)1 2 3 4 例： 在函数调用中混合一般参数、*以及**的方式。123456789def func(a,b,c,d,e,f): print(a,b,c,d,e,f)args = (2, 3)kargs = &#123;'d': 4, 'e': 5&#125;func(1, *args, f=6, **kargs)1 2 3 4 5 6 结语每一个看上去都不是很复杂，而且虽然种类较多但也不难理解。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>参数传递</tag>
        <tag>对象</tag>
        <tag>深拷贝</tag>
        <tag>浅拷贝</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[387.字符串中的第一个唯一字符]]></title>
    <url>%2F2018%2F05%2F24%2F387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[题目给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。 代码123456789101112131415161718192021222324252627282930class Solution: def firstUniqChar(self, s): """ :type s: str :rtype: int """ # listS = list(s) # judge = [] # for i in range(len(listS)): # judge = s[0:i] + s[i+1:] # if s[i] not in judge: # return i # return -1 # 建立哈希表，存储每个字符并统计其出现的次数 # hashMap = &#123;&#125; # for item in s: # if item in hashMap: # hashMap[item] = hashMap[item]+1 # else: # hashMap[item] = 1 # size = len(s) # for i in range(size): # if 1 == hashMap[s[i]]: # return i # return -1 lowercase = string.ascii_lowercase # string.ascii_lowercase返回小写字母 L_index = [s.index(label) for label in lowercase if s.count(label) == 1] # s.count(label) 返回label字符串在s字符串中出现的次数 return min(L_index) if len(L_index) else -1 注意1.string.ascii_lowercase返回所有小写字母 2.str.count(sub, start= 0,end=len(string))返回子字符串在字符串中出现的次数 sub – 搜索的子字符串 start – 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。 end – 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。 3.str.index(sub, beg=0, end=len(string))如果包含子字符串返回开始的索引值，否则抛出异常。 而·str.find(sub, beg=0, end=len(string))方法如果sub不在字符串中会返回-1。 sub – 指定检索的子字符串 beg – 开始索引，默认为0。 end – 结束索引，默认为字符串的长度。 4.python中的dict默认采用hashmap存储结构，因此查找效率很高。 5.variable == constant这种写法漏写一个=时会成为正确的赋值表达式，从而可能引起程序的逻辑错误；而使用constant == variable如果漏写一个=会产生语法错误，可以避免产生逻辑错误。]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>字符串</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[7.反转整数]]></title>
    <url>%2F2018%2F05%2F23%2F7-%E5%8F%8D%E8%BD%AC%E6%95%B4%E6%95%B0%2F</url>
    <content type="text"><![CDATA[题目给定一个 32 位有符号整数，将整数中的数字进行反转。 代码123456789101112131415class Solution: def reverse(self, x): """ :type x: int :rtype: int """ if x &gt;= 0: x = int(str(x)[::-1]) else: x = -int(str(x)[:-len(str(x)):-1]) if x &gt;= -2**31 and x &lt;= 2**31-1: return x else: return 0 注意1.与matlab使用^不同，python中表示x的y次幂使用** 2.将去掉符号的整数转化为字符串后按照反转字符串进行处理 3.对[::]的进一步理解]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>字符串转整数</tag>
        <tag>整数转字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇博客]]></title>
    <url>%2F2018%2F05%2F22%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[1这是Li的第一篇原创文章 第一次成功搭好一个好看的博客~ 什么都没有了hhh]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>try everything</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
